#LyX 1.6.4 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans avant
\font_typewriter default
\font_default_family sfdefault
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize 10
\spacing single
\use_hyperref true
\pdf_title "ROSA - Real time Operating System for AVR32"
\pdf_author "Marcus Jansson"
\pdf_subject "Real time RTOS AVR32"
\pdf_keywords "Real time RTOS AVR32"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 2.8cm
\topmargin 3.4cm
\rightmargin 2.8cm
\bottommargin 3.2cm
\headheight 3cm
\headsep 1.2cm
\footskip 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
ROSA
\end_layout

\begin_layout Author
Marcus Jansson <mjansson256@yahoo.se>
\end_layout

\begin_layout LyX-Code
\align center

\size larger
A tiny
\end_layout

\begin_layout LyX-Code
\align center

\size larger
Real time Operating System for AVR32
\end_layout

\begin_layout LyX-Code
\align center
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Description
\end_layout

\begin_layout Standard
ROSA is a small cooperative/preemptive real time kernel for AVR32 UC3A processor
s.
 It is aimed to be used on the Atmel EVK1100 platform.
\end_layout

\begin_layout Standard
This document is a description of ROSA's support for pseudo parallel execution
 of user programs.
 By 
\begin_inset Quotes eld
\end_inset

pseudo parallel
\begin_inset Quotes erd
\end_inset

 we mean it 
\begin_inset Quotes eld
\end_inset

seems
\begin_inset Quotes erd
\end_inset

 like the programs work in parallel.
 But as the UC3A processor is a single core processor, only one program
 at a time can be executed.
 
\end_layout

\begin_layout Standard
A small operating system like ROSA can be used to enhance the structure
 of a complex program.
 This is done by breaking down the complex program into several smaller
 programs.
\end_layout

\begin_layout Standard
Compared to other light weight kernels, ROSA is a tiny kernel with very
 limited functionality.
 
\end_layout

\begin_layout Subsection
Hardware
\end_layout

\begin_layout Standard
ROSA runs on the EVK1100 platform.
 Among other things the hardware features 512 kB flash memory, 64 kB internal
 RAM memory, a 12 Mhz external crystal, user LEDs, user buttons, serial
 communication etc.
\end_layout

\begin_layout Subsubsection
I/O drivers
\end_layout

\begin_layout Standard
ROSAs I/O drivers support the following hardware functions on EVK1100:
\end_layout

\begin_layout Itemize
LEDs, LED1-LED6.
\end_layout

\begin_layout Itemize
Buttons, PB0, PB1 and PB2.
\end_layout

\begin_layout Itemize
Mini-joystick.
\end_layout

\begin_layout Itemize
Potentiometer, POT.
\end_layout

\begin_layout Itemize
Serial ports, USART_0 and USART_1.
\end_layout

\begin_layout Subsection
Software
\end_layout

\begin_layout Subsubsection
ROSA source code
\end_layout

\begin_layout Standard
The ROSA source code is available in the rosa/src directory which makes
 it possible to expand ROSA with more services.
 Examples of expansions that can be done:
\end_layout

\begin_layout Itemize
Support for time sharing.
\end_layout

\begin_layout Itemize
Support for priority driven scheduling.
\end_layout

\begin_layout Itemize
Support for communication mechanisms, semaphores, monitors, mailboxes and
 rendez-vouz.
\end_layout

\begin_layout Itemize
...
\end_layout

\begin_layout Subsubsection
Directory structure
\end_layout

\begin_layout Standard
ROSAs software consist of the following directories and files:
\end_layout

\begin_layout Itemize
rosa/
\end_layout

\begin_deeper
\begin_layout Itemize
bin/ 
\begin_inset space \qquad{}
\end_inset


\begin_inset space \hfill{}
\end_inset

- Destination for the binary file.
\end_layout

\begin_layout Itemize
cpu/ 
\begin_inset space \qquad{}
\end_inset


\begin_inset space \hfill{}
\end_inset

- The startup and linker scripts.
\end_layout

\begin_layout Itemize
doc/ 
\begin_inset space \qquad{}
\end_inset


\begin_inset space \hfill{}
\end_inset

- Documentation about ROSA.
\end_layout

\begin_layout Itemize
include/ 
\begin_inset space \qquad{}
\end_inset


\begin_inset space \hfill{}
\end_inset

- The header file directory.
\end_layout

\begin_deeper
\begin_layout Itemize
drivers/ 
\begin_inset space \qquad{}
\end_inset


\begin_inset space \hfill{}
\end_inset

- Header files for the drivers.
\end_layout

\begin_layout Itemize
kernel/ 
\begin_inset space \qquad{}
\end_inset


\begin_inset space \hfill{}
\end_inset

- Header files for the kernel.
\end_layout

\end_deeper
\begin_layout Itemize
src/ 
\begin_inset space \qquad{}
\end_inset


\begin_inset space \hfill{}
\end_inset

- The source file directory.
\end_layout

\begin_deeper
\begin_layout Itemize
main.c 
\begin_inset space \qquad{}
\end_inset


\begin_inset space \hfill{}
\end_inset

- The main program for ROSA.
\end_layout

\begin_layout Itemize
rosa_config.h 
\begin_inset space \qquad{}
\end_inset


\begin_inset space \hfill{}
\end_inset

- User configuration of ROSA.
\end_layout

\begin_layout Itemize
kernel/
\begin_inset space \hfill{}
\end_inset

- Kernel source directory.
\end_layout

\begin_deeper
\begin_layout Itemize
rosa_ker.c 
\begin_inset space \qquad{}
\end_inset


\begin_inset space \hfill{}
\end_inset

- Kernel C source.
\end_layout

\begin_layout Itemize
rosa_ker_asm.S 
\begin_inset space \qquad{}
\end_inset


\begin_inset space \hfill{}
\end_inset

- Kernel assembler source.
\end_layout

\begin_layout Itemize
rosa_scheduler.c
\begin_inset space \qquad{}
\end_inset


\begin_inset space \hfill{}
\end_inset

- Scheduler specific source.
 
\end_layout

\begin_layout Itemize
rosa_int.c
\begin_inset space \qquad{}
\end_inset


\begin_inset space \hfill{}
\end_inset

- Interrupt specific source.
\end_layout

\begin_layout Itemize
rosa_int_asm.S
\begin_inset space \qquad{}
\end_inset


\begin_inset space \hfill{}
\end_inset

- Interrupt assembler source.
\end_layout

\begin_layout Itemize
rosa_tim.c
\begin_inset space \qquad{}
\end_inset


\begin_inset space \hfill{}
\end_inset

- Timer specific soruce.
\end_layout

\begin_layout Itemize
rosa_tim_asm.S 
\begin_inset space \qquad{}
\end_inset


\begin_inset space \hfill{}
\end_inset

- Timer assembler source.
\end_layout

\end_deeper
\begin_layout Itemize
drivers/
\end_layout

\begin_deeper
\begin_layout Itemize
button.c 
\begin_inset space \qquad{}
\end_inset


\begin_inset space \hfill{}
\end_inset

- Push button driver.
\end_layout

\begin_layout Itemize
delay.c
\begin_inset space \qquad{}
\end_inset


\begin_inset space \hfill{}
\end_inset

- Delay functions.
\end_layout

\begin_layout Itemize
gpio.c 
\begin_inset space \hfill{}
\end_inset

- GPIO driver.
\end_layout

\begin_layout Itemize
led.c 
\begin_inset space \qquad{}
\end_inset


\begin_inset space \hfill{}
\end_inset

- LED driver.
\end_layout

\begin_layout Itemize
pot.S 
\begin_inset space \qquad{}
\end_inset


\begin_inset space \hfill{}
\end_inset

- Potentiometer driver.
\end_layout

\begin_layout Itemize
usart.c 
\begin_inset space \qquad{}
\end_inset


\begin_inset space \hfill{}
\end_inset

- Serial communication driver.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Makefile 
\begin_inset space \hfill{}
\end_inset

- Script for the 'make' program.
\end_layout

\end_deeper
\begin_layout Subsection
How to compile ROSA
\end_layout

\begin_layout Subsubsection
make
\end_layout

\begin_layout Standard
ROSA can be cross compiled by using the GNU 'make' command from the rosa/
 directory on a *nix-like system with the avr32 GNU toolchain properly installed.
 Simply compile ROSA by typing:
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout Standard
in the rosa/ directory.
 A binary file, which can be programmed onto the EVK1100, is produced in
 the rosa/bin/ directory.
\end_layout

\begin_layout Subsubsection
AVR32 Studio
\end_layout

\begin_layout Standard
AVR32 Studio can be used to compile ROSA.
 First the ROSA project must be set up properly.
 This is done by creating a new Make Project (Main menu File/New/Project...)
 and importing the rosa/ directory into AVR32 Studio.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Subsection
How to program ROSA 
\begin_inset Newline newline
\end_inset

onto the EVK1100
\end_layout

\begin_layout Subsubsection
make
\end_layout

\begin_layout Standard
After a successful compile, ROSA can be programmed by the Dragon JTAG debugger
 onto the EVK1100 MCU flash memory by typing:
\end_layout

\begin_layout LyX-Code
make program
\end_layout

\begin_layout Standard
in the rosa/ directory.
 
\end_layout

\begin_layout Subsubsection
AVR32 Studio
\end_layout

\begin_layout Standard
AVR32 Studio can also be used for programming the MCU flash by the normal
 procedure.
\end_layout

\begin_layout Section
ROSA kernel functionality
\end_layout

\begin_layout Standard
As a user of ROSA you define tasks and their corresponding Task Control
 Blocks (TCB).
 When the ROSA kernel is started it picks one of the tasks and turn execution
 over to this task.
 
\end_layout

\begin_layout Standard
A task consist of:
\end_layout

\begin_layout Itemize
A TCB.
\end_layout

\begin_layout Itemize
Program code.
\end_layout

\begin_layout Itemize
A stack.
\end_layout

\begin_layout Standard
Each task have a TCB which contain information and/or space for:
\end_layout

\begin_layout Itemize
Task identification (name).
\end_layout

\begin_layout Itemize
Address to the next TCB in the TCB-list.
\end_layout

\begin_layout Itemize
The start address of the task.
\end_layout

\begin_layout Itemize
Where the dataarea is located and its size.
\end_layout

\begin_layout Itemize
The current state, which is described by the return address and the status
 register (SR).
\end_layout

\begin_layout Itemize
All necessary CPU registers.
\end_layout

\begin_layout Standard
The exact definition of the TCB is found in the file rosa/src/include/kernel/ros
a_def.h
\end_layout

\begin_layout Standard
The kernel also utilizes offsets found in the file rosa/src/include/kernel/rosa_
off.i.
 These offsets are used by assembler routines to access the elements in
 the TCB block.
\end_layout

\begin_layout Section
The internal structure of ROSA
\end_layout

\begin_layout Subsection
Creating and installing tasks
\end_layout

\begin_layout Standard
The first thing to note is that ROSA kernel routines execute in supervisor
 mode and the tasks execute in user mode.
\end_layout

\begin_layout Standard
All TCB's are linked together by the variable TCBLIST.
 When a task have been created by 
\emph on
ROSA_tcbCreate()
\emph default
 and installed in the kernel by 
\emph on
ROSA_tcbInstall()
\emph default
, the TCBLIST will contain a reference to the first TCB created.
\end_layout

\begin_layout Standard
When more tasks are created and installed, each TCB is linked into the TCBLIST
 and the correct information is filled into the TCB.
\end_layout

\begin_layout Standard
TODO: REALLY?! Cut the stuff below.
\end_layout

\begin_layout Standard
These are the necessary informations that need to be initialized in the
 TCB:
\end_layout

\begin_layout Itemize
How to find the next TCB.
\end_layout

\begin_layout Itemize
Start and return address, the address the task will start execute at.
\end_layout

\begin_layout Itemize
The status register (SR) is set to work in user mode.
\end_layout

\begin_layout Itemize
All CPU registers are saved into the TCB, so that they are not destroyed
 by a context switch.
\end_layout

\begin_layout Standard
Part of this need to be done in assembler, due to the low level nature of
 e.g.
 saving specific CPU registers.
 This is handled by the 
\emph on
ROSA_contextInit()
\emph default
 call in supervisor mode.
\end_layout

\begin_layout Subsection
Starting the ROSA kernel
\end_layout

\begin_layout Standard
When 
\emph on
ROSA_start()
\emph default
 is called the first task in TCBLIST will start to execute.
 In order to activate the first task we must load the correct value for
 the user stack pointer (USP), and set the correct value of the status register
 (SR).
 To start task execution the task start address, STADDR, is loaded from
 the TCB and a jump is done to that address.
 This need to be done from assembler in supervisor mode.
\end_layout

\begin_layout Subsection
Context switching
\end_layout

\begin_layout Standard
When a task have finished its execution during a period, 
\emph on
ROSA_contextSwitch()
\emph default
 is called.
 
\emph on
ROSA_contextSwitch() 
\emph default
performs the following sequence:
\end_layout

\begin_layout Itemize
The context of the CPU is stored to the TCB.
\end_layout

\begin_layout Itemize
The scheduler, 
\emph on
ROSA_scheduler()
\emph default
, is called and the currently running TCB, referenced to by the variable
 EXECTASK, is changed to another TCB from the TCBLIST.
\end_layout

\begin_layout Itemize
The context of the new TCB is restored by a call to
\begin_inset Newline newline
\end_inset

 
\emph on
ROSA_contextRestore()
\emph default
.
\end_layout

\begin_layout Standard
The 
\emph on
ROSA_contextSwitch() 
\emph default
utilize the supervisor mode which is entered by the '
\emph on
scall
\emph default
' instruction.
 This instruction jump to the 
\emph on
_handle_Supervisor_Call
\emph default
 vector and effectively run the context switch routines in supervisor mode.
\end_layout

\begin_layout Subsubsection
Context save
\end_layout

\begin_layout Standard

\emph on
_ROSA_contextSave()
\emph default
 does the following operations:
\end_layout

\begin_layout Itemize
Fetch the TCB of the current executing task.
\end_layout

\begin_layout Itemize
Save temporary work registers.
\end_layout

\begin_layout Itemize
Save the status register, SR.
\end_layout

\begin_layout Itemize
Save the CPU registers.
\end_layout

\begin_layout Itemize
Save the user stack pointer, USP.
\end_layout

\begin_layout Itemize
Save the return address.
\end_layout

\begin_layout Itemize
Correct the USP in order to be able to return to the task.
\end_layout

\begin_layout Subsubsection
Scheduling
\end_layout

\begin_layout Standard
The 
\emph on
ROSA_scheduler()
\emph default
 function get the next TCB to execute and put a reference to that TCB in
 the EXECTASK variable.
 
\end_layout

\begin_layout Subsubsection
Context restore
\end_layout

\begin_layout Standard

\emph on
_ROSA_contextRestore()
\emph default
 practically does the reverse of the context save:
\end_layout

\begin_layout Itemize
Enter supervisor mode.
\end_layout

\begin_layout Itemize
Restore the USP.
\end_layout

\begin_layout Itemize
Restore return address.
\end_layout

\begin_layout Itemize
Restore CPU registers.
\end_layout

\begin_layout Itemize
Restore SR.
\end_layout

\begin_layout Itemize
Enables interrupt.
\end_layout

\begin_layout Itemize
Enter user mode.
\end_layout

\begin_layout Standard
This sequence makes the CPU start executing another task than the previous
 one.
\end_layout

\begin_layout Section
How to use ROSA from C
\end_layout

\begin_layout Standard
The ROSA kernel consist of C and assembler code.
 We will look at how ROSA can be used from C, since user application code
 is usually written in C.
 The following code contain two tasks and initialization of ROSA.
 Each task will control LED2 and LED3 on the EVK1100.
\end_layout

\begin_layout Subsection
Simple source code walk through
\end_layout

\begin_layout Standard
This is a description on how to set up the main.c file and start running
 the ROSA kernel.
 A more detailed walk through of the kernel is found in another section.
 
\end_layout

\begin_layout Standard
TODO: Say which section!
\end_layout

\begin_layout Subsubsection
Headers
\end_layout

\begin_layout Standard
We start by including the necessary header files.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,language=C,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

//Kernel includes
\end_layout

\begin_layout Plain Layout

#include "kernel/rosa_ker.h"
\end_layout

\begin_layout Plain Layout

#include "kernel/rosa_def.h"
\end_layout

\begin_layout Plain Layout

#include "kernel/rosa_ext.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//I/O driver includes
\end_layout

\begin_layout Plain Layout

#include "drivers/led.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//Include configuration
\end_layout

\begin_layout Plain Layout

#include "rosa_config.h"
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Tasks
\end_layout

\begin_layout Standard
Now we define our tasks, task1 and task2.
 Note that the tasks consist of a 
\emph on
while(1)
\emph default
-loop, which basically will make the task run forever.
 
\end_layout

\begin_layout Standard
The next thing to note is the ledOn/Off scheme, task1 will light up LED2
 of the EVK1100.
 Task2 will light up LED3.
 Pay attention to the inconsistency between the labeling of the LEDs on
 EVK1100 and the defined LEDx_GPIO numbers.
\end_layout

\begin_layout Standard

\emph on
ROSA_yield()
\emph default
 is the function which perform a context switch, allowing both tasks to
 run in pseudo parallel, despite the forever 
\emph on
while(1)
\emph default
-loop.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,language=C,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

//TASK1
\end_layout

\begin_layout Plain Layout

//LED2 lights up
\end_layout

\begin_layout Plain Layout

//LED3 goes dark
\end_layout

\begin_layout Plain Layout

void task1(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	while(1) {
\end_layout

\begin_layout Plain Layout

		ledOn(LED1_GPIO);	//EVK1100 LED2!
\end_layout

\begin_layout Plain Layout

		ledOff(LED2_GPIO);
\end_layout

\begin_layout Plain Layout

		ROSA_yield();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//TASK2
\end_layout

\begin_layout Plain Layout

//LED3 lights up
\end_layout

\begin_layout Plain Layout

//LED2 goes dark
\end_layout

\begin_layout Plain Layout

void task2(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	while(1) {
\end_layout

\begin_layout Plain Layout

		t2_tick++;
\end_layout

\begin_layout Plain Layout

		ledOff(LED1_GPIO);
\end_layout

\begin_layout Plain Layout

		ledOn(LED2_GPIO);
\end_layout

\begin_layout Plain Layout

		ROSA_yield();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
TCB and stack declaration
\end_layout

\begin_layout Standard
We declare our TCB and stack for the two tasks we are going to create.
 The first thing we do is reserving stack space by defining a global array
 with appropriate size.
 Space for the TCB is also reserved by a tcb struct.
 The tcb type is defined in rosa/src/include/kernel/rosa_def.h.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,language=C,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

//Data blocks for the tasks
\end_layout

\begin_layout Plain Layout

#define T1_STACK_SIZE 0x40
\end_layout

\begin_layout Plain Layout

static int t1_stack[T1_STACK_SIZE];
\end_layout

\begin_layout Plain Layout

static tcb t1_tcb;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define T2_STACK_SIZE 0x40
\end_layout

\begin_layout Plain Layout

static int t2_stack[T2_STACK_SIZE];
\end_layout

\begin_layout Plain Layout

static tcb t2_tcb;
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
More TCB and TCBLIST
\end_layout

\begin_layout Standard
So far so good, but ROSA does not know where to find the tasks we want to
 run, and neither are the TCBs of the tasks set up correctly yet.
 This is done by calling 
\emph on
ROSA_tcbCreate()
\emph default
 and 
\emph on
ROSA_tcbInstall()
\emph default
 and must be done before starting ROSA.
\end_layout

\begin_layout Standard
Here we do it from the main()-function:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,language=C,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	//Initialize ROSA
\end_layout

\begin_layout Plain Layout

	ROSA_init();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	//Create tasks, set up the TCB correctly
\end_layout

\begin_layout Plain Layout

	ROSA_tcbCreate(&t1_tcb, "tsk1", task1, t1_stack, T1_STACK_SIZE);
\end_layout

\begin_layout Plain Layout

	ROSA_tcbCreate(&t2_tcb, "tsk2", task2, t2_stack, T2_STACK_SIZE);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	//Install the TCBs into the TCBLIST which ROSA uses.
\end_layout

\begin_layout Plain Layout

	ROSA_tcbInstall(&t1_tcb);
\end_layout

\begin_layout Plain Layout

	ROSA_tcbInstall(&t2_tcb);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	//Start the ROSA kernel
\end_layout

\begin_layout Plain Layout

	ROSA_start();
\end_layout

\begin_layout Plain Layout

	/* Execution will never return here */
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Compiling
\end_layout

\begin_layout Standard
To compile the simple ROSA system, enter the rosa directory and type:
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout Standard
to start the compilation.
\end_layout

\begin_layout Subsubsection
Programming
\end_layout

\begin_layout Standard
To program the binary onto the EVK1100, enter the rosa directory and type:
\end_layout

\begin_layout LyX-Code
make program
\end_layout

\begin_layout Standard
When the programming is done the two tasks should start to execute on the
 EVK1100.
\end_layout

\begin_layout Section
Kernel source code walk through
\end_layout

\begin_layout Standard
This is a closer look at the function calls to the ROSA kernel.
\end_layout

\begin_layout Standard
In the main() function, as shown previously, the first kernel function to
 be called is 
\emph on
ROSA_init().
 
\emph default
This function initializes the I/O and set the TCBLIST and EXECTASK to NULL.
 This is done since no task have been added yet.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,language=C,tabsize=4"
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ROSA_init(void) 
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

	//Do initialization of I/O drivers 
\end_layout

\begin_layout Plain Layout

	ledInit();                         //LEDs 
\end_layout

\begin_layout Plain Layout

	buttonInit();                      //Buttons 
\end_layout

\begin_layout Plain Layout

	joystickInit();                    //Joystick 
\end_layout

\begin_layout Plain Layout

	potInit();                         //Potentiometer 
\end_layout

\begin_layout Plain Layout

    usartInit(USART, &usart_options, FOSC0);//Serial
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	TCBLIST = NULL; 
\end_layout

\begin_layout Plain Layout

	EXECTASK = NULL; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

Next the TCB's of two tasks are created by function call to ROSA_tcbCreate().
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ROSA_tcbCreate(&t1_tcb, "tsk1", task1, t1_stack, T1_STACK_SIZE);
\end_layout

\begin_layout Plain Layout

ROSA_tcbCreate(&t2_tcb, "tsk2", task2, t2_stack, T2_STACK_SIZE);
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

These calls fill in the necessary information into the TCB as shown below.
 First the task id/name is copied into the TCB.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,extendedchars=true,language=C,tabsize=4"
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction,
 int * tcbStack, int tcbStackSize) 
\end_layout

\begin_layout Plain Layout

{ 	
\end_layout

\begin_layout Plain Layout

	int i;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	//Initialize the tcb with the correct values 	
\end_layout

\begin_layout Plain Layout

	for(i = 0; i < NAMESIZE; i++) { 		
\end_layout

\begin_layout Plain Layout

		//Copy the id/name 		
\end_layout

\begin_layout Plain Layout

		tcbTask->id[i] = tcbName[i]; 	
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

The link to the next TCB is set to NULL as this TCB block have not been
 installed into the ROSA kernel yet.
 That is done later.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	//Dont link this TCB anywhere yet 	
\end_layout

\begin_layout Plain Layout

	tcbTask->nexttcb = NULL;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\end_inset

The start and return addresses are set up to point to the beginning of the
 task function.
 The stack and its size are set up, and the USP is set to point to the data
 area.
 An initial value of the SR is set.
 This give us a known initial state of the task.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	//Set the task function start and return address 	
\end_layout

\begin_layout Plain Layout

	tcbTask->staddr = tcbFunction; 	
\end_layout

\begin_layout Plain Layout

	tcbTask->retaddr = (int)tcbFunction;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	//Set up the stack 	
\end_layout

\begin_layout Plain Layout

	tcbTask->datasize = tcbStackSize; 	
\end_layout

\begin_layout Plain Layout

	tcbTask->dataarea = tcbStack + tcbStackSize; 	
\end_layout

\begin_layout Plain Layout

	tcbTask->saveusp = tcbTask->dataarea;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	//Set the initial SR 	
\end_layout

\begin_layout Plain Layout

	tcbTask->savesr = ROSA_INITIALSR;
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

The last thing to do during TCB creation is to set up the task context registers
 to a known state.
 This is done in assembler by the 
\emph on
ROSA_contextInit()
\emph default
 call.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	//Initialize context 	
\end_layout

\begin_layout Plain Layout

	ROSA_contextInit(tcbTask); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

The assembler routine initialize the lr register, which is the task activation
 record.
 The registers in the TCB, TCB.SAVEREG.R0-TCB.SAVEREG.R12, are set to zero.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ROSA_contextInit: 	
\end_layout

\begin_layout Plain Layout

	//Initialize lr in the savereg area 	
\end_layout

\begin_layout Plain Layout

	ld.w r0,r12[TCB.STADDR] 	
\end_layout

\begin_layout Plain Layout

	st.w r12[TCB.SAVEREG.LR],r0
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	//Initialize regs to zero 	
\end_layout

\begin_layout Plain Layout

	mov r0,0x0 	
\end_layout

\begin_layout Plain Layout

	st.w r12[TCB.SAVEREG.R0],r0 	
\end_layout

\begin_layout Plain Layout

	st.w r12[TCB.SAVEREG.R1],r0 	
\end_layout

\begin_layout Plain Layout

	st.w r12[TCB.SAVEREG.R2],r0 	
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	st.w r12[TCB.SAVEREG.R12],r0 	
\end_layout

\begin_layout Plain Layout

	mov pc,lr 
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

last line
\end_layout

\begin_layout Section
More about context switching
\end_layout

\begin_layout Standard
There are two methods for context switching in the ROSA kernel.
\end_layout

\begin_layout Enumerate
Voluntary yield from a task (cooperative mode).
\end_layout

\begin_layout Enumerate
Timer interrupts (preemptive mode).
\end_layout

\begin_layout Standard
Cooperative and preemptive modes can be used simultaneously in ROSA.
\end_layout

\begin_layout Subsection
Yield
\end_layout

\begin_layout Standard
A cooperative, voluntary yield is performed by the 
\emph on
ROSA_yield()
\emph default
 function call.
 A task that yields give up its remaining CPU time to let other tasks run.
 Later, when the ROSA scheduler put the yielding task into RUN mode again,
 execution continue at the instruction following 
\emph on
ROSA_yield()
\emph default
.
\end_layout

\begin_layout Subsubsection*
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,language=C,tabsize=4"
inline false
status open

\begin_layout Plain Layout

void task(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	while(1) {
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

		ROSA_yield();	//Voluntary context switch
\end_layout

\begin_layout Plain Layout

		...				//Execution continue 
\end_layout

\begin_layout Plain Layout

                        //here next time the task run.
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Timer interrupts
\end_layout

\begin_layout Standard
Preemptive kernel mode is activated by initiating and starting the timer
 interrupts once, in which case the task switches will be automatic until
 the timer interrupts are stopped.
\end_layout

\begin_layout Standard
ROSA utilizes timer 0 of the AVR32 to generate periodic interrupts.
 The periodicity is set by the prescaler value and RC value, which is the
 'Compare Register'.
 Context switching is performed in the interrupt service routine (ISR) using
 the ROSA_contextSaveFromISR().
\end_layout

\begin_layout Subsubsection*
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true,language=C,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

__attribute__((__interrupt__)) void ROSA_timerISR(void) 
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

	int sr; 
\end_layout

\begin_layout Plain Layout

	volatile avr32_tc_t * tc = &AVR32_TC;
\end_layout

\begin_layout Plain Layout

	//Read the timer status register to determine if this is a valid interrupt
 
\end_layout

\begin_layout Plain Layout

	sr = tc->channel[0].sr; 
\end_layout

\begin_layout Plain Layout

	if(sr & AVR32_TC_CPCS_MASK) 
\end_layout

\begin_layout Plain Layout

	{ 
\end_layout

\begin_layout Plain Layout

		ROSA_yieldFromISR(); 
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Expansion of ROSA
\end_layout

\begin_layout Standard
Imagine we had a way to make a delay in a task.
 The code could look like this:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},language=C,tabsize=4"
inline false
status open

\begin_layout Plain Layout

void task(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	while(1) {
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

		ROSA_sysTickWait(10);    //Delay 10 ticks
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Tick?
\end_layout

\begin_layout Standard
What is a tick? A tick is closely related to timer interrupts, which are
 generated by a timer circuit inside the MCU.
 When an interrupt happens an interrupt service routine (ISR) is run.
 The ISR increase the system time by one 
\begin_inset Quotes eld
\end_inset

tick
\begin_inset Quotes erd
\end_inset

.
 Thereafter it checks if there are any tasks which should be activated,
 i.e.
 the tasks which have previously been waiting but want to run now.
 For a real time system, 1 ms usually is a good period between ticks.
 It is often called system tick, sysTick for short.
 In ROSA it would be appropriate to call the function 
\emph on
ROSA_sysTickWait()
\emph default
.
\end_layout

\begin_layout Subsection
ROSA_sysTickWait()
\end_layout

\begin_layout Standard
The delay function work according to the following:
\end_layout

\begin_layout Itemize
Link the executing task into a DELAY queue.
\end_layout

\begin_layout Itemize
Link out a task from the READY queue.
\end_layout

\begin_layout Itemize
Call the scheduler to see which task should begin execute.
\end_layout

\begin_layout Standard
As we can see this require a number of queues to handle the DELAY.
 At least one queue for all waiting tasks and one queue for the tasks which
 are ready.
 
\end_layout

\begin_layout Standard
None of this is yet implemented in ROSA.
\end_layout

\begin_layout Section
Summary
\end_layout

\begin_layout Standard
We have seen the basics of a tiny kernel and how it can be implemented.
 We have given some ideas as how the kernel can be expanded.
 The complete code for ROSA is found in the rosa/src directory.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
ROSA API
\end_layout

\begin_layout Subsection
Brief API list
\end_layout

\begin_layout Standard
This is a list of the API for ROSA.
 Some of these functions are not implemented yet.
 The unimplemented functions are noted with a dot (.) in front of the function.
\end_layout

\begin_layout Subsubsection
Kernel API
\end_layout

\begin_layout LyX-Code
void ROSA_init(void);             
\end_layout

\begin_layout LyX-Code
void ROSA_init_lowlevel(void);    
\end_layout

\begin_layout LyX-Code
void ROSA_start(void);            
\end_layout

\begin_layout LyX-Code
void ROSA_start_lowlevel(void);      
\end_layout

\begin_layout LyX-Code
void ROSA_yield(void); 
\end_layout

\begin_layout LyX-Code
void ROSA_yieldFromISR(void); 
\end_layout

\begin_layout LyX-Code
void ROSA_contextRestore(void); 
\end_layout

\begin_layout LyX-Code
void ROSA_contextSave(void); 
\end_layout

\begin_layout LyX-Code
void ROSA_contextSaveFromISR(void); 
\end_layout

\begin_layout LyX-Code
void ROSA_contextRestoreFromInterrupt(void); 
\end_layout

\begin_layout LyX-Code
void ROSA_interruptInit(void);
\end_layout

\begin_layout LyX-Code
void ROSA_interruptDisable(void); 
\end_layout

\begin_layout LyX-Code
void ROSA_interruptEnable(void); 
\end_layout

\begin_layout LyX-Code
int ROSA_isInterruptEnabled(void); 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
TCB API 
\end_layout

\begin_layout LyX-Code
struct tcb_t;    //TCB struct containing task data 
\end_layout

\begin_layout LyX-Code
tcb * tcbCreate(tcb * TCB, char *id, void *taskFunction, int *stack, int
 stackSize);
\end_layout

\begin_layout LyX-Code
void tcbInstall(tcb * TCB); 
\end_layout

\begin_layout LyX-Code
.
 void tcbDestroy(tcb * TCB);
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

//Functions for inheritance protocol 
\end_layout

\begin_layout LyX-Code
.
 int tcbPrioGet(void); 
\end_layout

\begin_layout LyX-Code
.
 void tcbPrioSet(int prio); 
\end_layout

\begin_layout LyX-Code
.
 int tcbPrioBaseGet(void); 
\end_layout

\begin_layout LyX-Code
.
 void tcbPrioBaseSet(int prio);
\end_layout

\begin_layout Subsubsection
Semaphore API
\end_layout

\begin_layout LyX-Code
.
 void semCreate(sem  * semaphore); 
\end_layout

\begin_layout LyX-Code
.
 void semDestroy(sem * semaphore);
\end_layout

\begin_layout LyX-Code
.
 void semTake(sem * semaphore); 
\end_layout

\begin_layout LyX-Code
.
 void semGive(sem * semaphore);
\end_layout

\begin_layout Subsubsection
Timer API
\end_layout

\begin_layout LyX-Code
//sysTick real time period 
\end_layout

\begin_layout LyX-Code
void timerPrescalerSet(int prescale); 
\end_layout

\begin_layout LyX-Code
void timerRCSet(int);
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

//Timer control 
\end_layout

\begin_layout LyX-Code
void timerStart(void); 
\end_layout

\begin_layout LyX-Code
void timerStop(void); 
\end_layout

\begin_layout LyX-Code
void ROSA_timerReadSR(void);
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

//The interrupt handler
\end_layout

\begin_layout LyX-Code
void timerISR(void);              //The interrupt handler.
\end_layout

\begin_layout Subsubsection
sysTick API
\end_layout

\begin_layout LyX-Code
.
 void sysTickIncrease(void); 
\end_layout

\begin_layout LyX-Code
.
 int sysTickGet(void); 
\end_layout

\begin_layout LyX-Code
.
 void sysTickWait(int ticks); 
\end_layout

\begin_layout LyX-Code
.
 void sysTickWaitUntil(int ticks);
\end_layout

\begin_layout Subsubsection
debugging functionality API 
\end_layout

\begin_layout LyX-Code
dgbPrintTcb(tcb * TCB);               //Printing of tcb's to serial
\end_layout

\begin_layout Subsubsection
I/O driver API
\end_layout

\begin_layout LyX-Code
//Button
\end_layout

\begin_layout LyX-Code
void buttonInit(void); 
\end_layout

\begin_layout LyX-Code
int isButton(int button_nr); 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

//Joystick
\end_layout

\begin_layout LyX-Code
void joystickInit(void);
\end_layout

\begin_layout LyX-Code
int isJoystickUp(void); 
\end_layout

\begin_layout LyX-Code
int isJoystickDown(void);
\end_layout

\begin_layout LyX-Code
int isJoystickLeft(void); 
\end_layout

\begin_layout LyX-Code
int isJoystickRight(void); 
\end_layout

\begin_layout LyX-Code
int isJoystickPressed(void);
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

//GPIO
\end_layout

\begin_layout LyX-Code
void gpioInit(int pinnr, int type); 
\end_layout

\begin_layout LyX-Code
void gpioSet(int pinnr); 
\end_layout

\begin_layout LyX-Code
void gpioClear(int pinnr); 
\end_layout

\begin_layout LyX-Code
void gpioToggle(int pinnr); 
\end_layout

\begin_layout LyX-Code
int gpioGet(int pinnr);
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

//USART
\end_layout

\begin_layout LyX-Code
int usartInit(volatile avr32_usart_t *, 
\begin_inset Newline newline
\end_inset

const usart_options_t, uint, ulong); 
\end_layout

\begin_layout LyX-Code
void usartGetLine(volatile avr32_usart_t *, char *); 
\end_layout

\begin_layout LyX-Code
char usartGetChar(volatile avr32_usart_t *); 
\end_layout

\begin_layout LyX-Code
void usartWriteLine(volatile avr32_usart_t *, char *); 
\end_layout

\begin_layout LyX-Code
void usartWriteChar(volatile avr32_usart_t *,
\begin_inset Newline newline
\end_inset

 char);
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

//Potentiometer
\end_layout

\begin_layout LyX-Code
void potInit(void);
\end_layout

\begin_layout LyX-Code
int potGetValue(void);
\end_layout

\begin_layout Subsubsection
Standard library functions
\end_layout

\begin_layout LyX-Code
void * malloc(size_t size)
\end_layout

\begin_layout LyX-Code
void free(void *);
\end_layout

\begin_layout LyX-Code
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Detailed user API 
\end_layout

\begin_layout Subsection
User API
\end_layout

\begin_layout Subsubsection
ROSA_interruptDisable
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_interruptDisable(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Disable interrupts globally.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_interruptEnable
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype: 
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_interruptEnable(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Enable interrupts globally.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_isInterruptEnabled
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
int ROSA_isInterruptEnabled(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Check to see if interrupts are enabled.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TRUE or FALSE depending on if interrupts are enabled.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_start
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_start(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Start execution of the installed TCB's.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_semCreate
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void semCreate(sem *semaphore)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Creates a semaphore.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sem *semaphore - A pointer to the semaphore to create.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_semDestroy
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_semDestroy(sem *semaphore)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destroy a semaphore and free all associated resources.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sem *semaphore - A pointer to the semaphore to destroy.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_semGive
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_semGive(sem *semaphore)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Give a semaphore back.
 The semaphore can only be given back by its owner.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sem *semaphore - A pointer to the semaphore to give back.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_semTake
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_semTake(sem *semaphore)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Try to take a semaphore.
 Fails if the semaphore is already taken by someone else.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sem *semaphore - A pointer to the semaphore to try to take.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return TRUE/FALSE depending on success to take semaphore.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_sysTickGet
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
int ROSA_sysTickGet(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Get the current system tick from the ROSA kernel.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The current system tick.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_sysTickWait
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_sysTickWait(int ticks)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wait '
\emph on
ticks
\emph default
' number of system ticks before continuing.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int ticks - The number of ticks to wait.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_sysTickWaitUntil
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_sysTickWaitUntil(int absTick)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wait until the absolute value of the system tick is equal to '
\emph on
absTick
\emph default
' before continuing.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int absTick - The absolute tick to wait for.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_tcbCreate
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_tcbCreate(tcb *TCB, char *id, void *taskFunc, int *stack, int
 stackSize)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Create a TCB entry according to the given parameters.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Itemize
tcb *TCB - A pointer to the TCB block to be created.
\end_layout

\begin_layout Itemize
char *id - A identification for the TCB block of length NAMESIZE (default
 NAMESIZE = 4)
\end_layout

\begin_layout Itemize
void *taskFunc - A pointer to the function which are to be executed by the
 task.
\end_layout

\begin_layout Itemize
int *stack - A pointer to the task stack area.
\end_layout

\begin_layout Itemize
int stackSize - The maximum allowed stack for this task.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_tcbDestroy
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_tcbDestroy(tcb *TCB)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destroy a TCB entry and free all associated resources.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tcb *TCB - A pointer to the TCB block to be destroyed.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_tcbInstall
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_tcbInstall(tcb *TCB)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Install a TCB entry into the TCBLIST of the ROSA kernel.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tcb *TCB - A pointer to the TCB to install into the kernel.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_tcbRemove
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_tcbRemove *TCB)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Remove a TCB entry from the TCBLIST of the ROSA kernel.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tcb *TCB - A pointer to the TCB to be removed from the kernel.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
I/O Driver API
\end_layout

\begin_layout Subsubsection
buttonInit
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void buttonInit(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initialize the three push buttons of the EVK1100.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
isButton
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
int isButton(int button_nr)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Check if the button is pressed.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int button_nr - The button number, legal values are: 
\end_layout

\begin_layout Itemize
PUSH_BUTTON_0
\end_layout

\begin_layout Itemize
PUSH_BUTTON_1
\end_layout

\begin_layout Itemize
PUSH_BUTTON_2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TRUE or FALSE depending on the state of the push button.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
joystickInit
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void joystickInit(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initialize the joystick of the EVK1100.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
isJoystickDown
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
int isJoystickDown(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Check if the joystick is pressed down.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TRUE or FALSE depending on the state of the joystick.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
isJoystickLeft
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
int isJoystickLeft(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Check if the joystick is pressed left.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TRUE or FALSE depending on the state of the joystick.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
isJoystickPressed
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
int isJoystickPressed(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Check if the joystick is pressed/clicked down its center.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TRUE or FALSE depending on the state of the joystick.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
isJoystickRight
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
int isJoystickRight(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Check if the joystick is pressed right.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TRUE or FALSE depending on the state of the joystick.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
isJoystickUp
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
int isJoystickUp(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Check if the joystick is pressed up.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TRUE or FALSE depending on the state of the joystick.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
gpioInit
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void gpioInit(int pinnr, int type)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initialize the GPIO '
\emph on
pinnr
\emph default
' to be of type '
\emph on
type
\emph default
'.
 
\end_layout

\begin_layout Plain Layout
Type can be INPUT or OUTPUT.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Itemize
int pinnr - The GPIO pin number
\end_layout

\begin_layout Itemize
int type - The type to initialize the 
\emph on
'pinnr'
\emph default
 to.
 Legal values are INPUT or OUTPUT.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
gpioClear
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void gpioClear(int pinnr)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set the GPIO 
\emph on
'pinnr'
\emph default
 to 0.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int pinnr - The GPIO pin number.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
gpioGet
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
int gpioGet(int pinnr)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Read the value of the GPIO pin 
\emph on
'pinnr'
\emph default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int pinnr - The GPIO pin number.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The current value of the GPIO 
\emph on
'pinnr'
\emph default
.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
gpioSet
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void gpioSet(int pinnr)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set the GPIO 
\emph on
'pinnr'
\emph default
 to 1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int pinnr - The GPIO pin number.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
gpioToggle
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void gpioToggle(int pinnr)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Toggle the GPIO 
\emph on
'pinnr'
\emph default
.
 
\end_layout

\begin_layout Plain Layout
Example: If it previously was 1, it will become 0, and vice verse.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int pinnr - The GPIO pin number.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
potInit
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void potInit(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initialize the potentiometer of the EVK1100.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
potGetValue
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
int potGetValue(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Get the current value of the potentiometer of the EVK1100.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The current value of the potentiometer.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
usartInit
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
int usartInit(volatile avr32_usart_t *usart, const usart_options_t opt,
 long pba_hz)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initialize the USART controller to do RS-232 serial communication.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Itemize
avr32_usart_t *usart - Pointer to the USART controller.
\end_layout

\begin_layout Itemize
usart_options_t opt - The USART options to use during initialization.
\end_layout

\begin_layout Itemize
long pba_hz - The frequency of the PBA bus.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
USART_SUCCESS on success.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
usartGetLine
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void usartGetLine(volatile avr32_usart_t * usart, char * buf)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Get a line, until a return is received, from the USART.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Itemize
avr32_usart_t * usart - A pointer to the USART controller.
 
\end_layout

\begin_layout Itemize
char * buf - A pointer to the buffer to hold the input line.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
usartGetChar
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
char usartGetChar(volatile avr32_usart_t * usart)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Get a single character from the USART controller.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
avr32_usart_t * usart - A pointer to the USART controller.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A char from the USART controller.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
usartWriteChar
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void usartWriteChar(volatile avr32_usart_t * usart, char ch)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Write a single char 
\emph on
'ch'
\emph default
 to the USART controller.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Itemize
avr32_usart_t * usart - A pointer to the USART controller.
\end_layout

\begin_layout Itemize
char ch - The character to write to the USART controller.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
usartWriteLine
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void usartWriteLine(volatile avr32_usart_t * usart, char * string)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Write a string of characters to the USART controller.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Itemize
avr32_usart_t * usart - A pointer to the USART controller.
\end_layout

\begin_layout Itemize
char * string - A pointer to the string to write to the USART controller.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
usartWriteTcb
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void usartWriteTcb(volatile avr32_usart_t * usart, tcb * dbgtcb)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Write TCB debugging information to the USART controller.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Itemize
avr32_usart_t * usart - A pointer to the USART controller.
\end_layout

\begin_layout Itemize
tcb *TCB - A pointer to the TCB to write to the USART controller.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
malloc
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void * malloc(size_t size)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Allocate 
\emph on
'size'
\emph default
 bytes of memory from the heap.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
size_t size - The number of bytes to allocate.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A pointer to the allocated memory.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
free
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void * free(void *mem)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Free the allocated memory at the location pointed to by 
\emph on
'mem'
\emph default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
void * mem - A pointer to the allocated memory to set free.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Kernel API
\end_layout

\begin_layout Standard
These are internal kernel functions, which are not intended to be called
 from user programs.
\end_layout

\begin_layout Subsubsection
ROSA_init
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_init(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initialize the ROSA kernel.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_init_lowlevel
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_init_lowlevel(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initialize the ROSA kernel on a low level.
 Helper function in assembler to accompany ROSA_init().
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_start
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_start(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Start the execution of the TCB's installed into the TCBLIST.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_start_lowlevel
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_start_lowlevel(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Start the ROSA kernel on a low level.
 Helper function in assembler to accompany ROSA_start()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_contextRestore
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_contextRestore(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Restore the context of the TCB referenced by the EXECTASK variable.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_contextSave
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_contextSave(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Save the context of the TCB referenced by the EXECTASK variable.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_contextRestoreFromISR
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_contextRestoreFromISR(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Restore the context of the TCB referenced by the EXECTASK variable.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_contextSaveFromISR
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_contextSaveFromISR
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Save the context of the TCB referenced by the EXECTASK variable.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_interruptInit
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_interruptInit(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initialize the timer interrupt handling.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_tcbBasePrioGet
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
int ROSA_tcbPrioBaseGet(tcb *TCB)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Get the current base priority of the TCB.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tcb *TCB - A pointer to the TCB to get priority from.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The current base priority.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_tcbBasePrioSet
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_tcbBasePrioSet(tcb *TCB, int prio)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set the base priority of the TCB.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Itemize
tcb *TCB - A pointer to the TCB to set new base priority to.
\end_layout

\begin_layout Itemize
int prio - The value of the base proirity to set.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_tcbPrioGet
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
int ROSA_tcbPrioGet(tcb *TCB)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Get the current priority of the TCB.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tcb *TCB - A pointer to the TCB to get priority from.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The value of the current priority of the TCB.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_tcbPrioSet
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_tcbPrioSet(tcb *TCB)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set the current priority of the TCB.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tcb *TCB - A pointer to the TCB to set new priority to.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_timerClearInterrupt
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
int ROSA_timerClearInterrupt(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clear the timer interrupt flag.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_timerInit
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_timerInit(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initialize timer 0.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_timerPrescaleSet
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_timerPrescaleSet(int prescale)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set the prescale of timer 0.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int prescale - The prescale value.
 Legal values are:
\end_layout

\begin_layout Plain Layout
TC_CLOCK_SOURCE_TC2 = fPBA / 2
\end_layout

\begin_layout Plain Layout
TC_CLOCK_SOURCE_TC3 = fPBA / 8
\end_layout

\begin_layout Plain Layout
TC_CLOCK_SOURCE_TC4= fPBA / 32
\end_layout

\begin_layout Plain Layout
TC_CLOCK_SOURCE_TC5= fPBA / 128
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_timerRCSet
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_timerRCSet(int rc)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set the RC, compare value, of the timer 0 to 
\emph on
'rc'
\emph default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int rc - the RC value to set.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_timerReset
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_timerReset(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reset timer 0 to start counting from 0 again.
 This will not in any aspect stop the timer.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_timerStart
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_timerStart(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Start the timer 0.
 The timer need to have been initialized with ROSA_timerInit() previously.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
ROSA_timerStop
\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prototype:
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none" width="10cm">
\begin_inset Text

\begin_layout Plain Layout
void ROSA_timerStop(void)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stop timer 0 from counting any further.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_body
\end_document
